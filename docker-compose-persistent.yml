version: '3.8'

services:
  frontend:
    build: ./frontend
    ports:
      - '3000:80'
    depends_on:
      - backend
    restart: unless-stopped
    volumes:
      - frontend_logs:/var/log/nginx
    environment:
      - NODE_ENV=production

  backend:
    build: ./backend
    ports:
      - '5000:5000'
    restart: unless-stopped
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
    environment:
      - NODE_ENV=production
      - PORT=5000

  jenkins:
    build: .
    ports:
      - '8080:8080'
      - '50000:50000'
    volumes:
      - jenkins_home:/var/jenkins_home
      - jenkins_workspace:/home/jenkins/test
      - jmeter_data:/opt/apache-jmeter-5.6.3
      - taurus_data:/opt/taurus
      - docker_sock:/var/run/docker.sock
      - test_results:/home/jenkins/test-results
      - jenkins_logs:/var/log/jenkins
    environment:
      - JENKINS_OPTS=--httpPort=8080
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
    restart: unless-stopped
    privileged: true
    depends_on:
      - frontend
      - backend

  # Optional: Database for persistent data storage
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
    ports:
      - '5432:5432'
    restart: unless-stopped

  # Optional: Redis for caching
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    ports:
      - '6379:6379'
    restart: unless-stopped

volumes:
  # Jenkins persistent volumes
  jenkins_home:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./jenkins-data/home
  jenkins_workspace:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./jenkins-data/workspace
  test_results:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./jenkins-data/test-results
  
  # Application data volumes
  frontend_logs:
    driver: local
  backend_data:
    driver: local
  backend_logs:
    driver: local
  
  # Testing tools volumes
  jmeter_data:
    driver: local
  taurus_data:
    driver: local
  
  # Docker socket for container management
  docker_sock:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/run/docker.sock
  
  # Jenkins logs
  jenkins_logs:
    driver: local
  
  # Database volumes
  postgres_data:
    driver: local
  postgres_logs:
    driver: local
  
  # Cache volumes
  redis_data:
    driver: local
  redis_logs:
    driver: local

networks:
  default:
    name: taurus-test-network
    driver: bridge 